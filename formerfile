<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Admin Operations Plan</title>
    <!-- Chosen Palette: Warm Neutrals -->
    <!-- Application Structure Plan: The SPA is designed as a 4-part interactive dashboard. 
        1. Overview: Presents the high-level 'Why' (Priorities) and 'How' (Monitoring) from the report, setting immediate context.
        2. Team Coverage: A dynamic dashboard (not static tables) with team filters (Seattle/SKC) that update a detailed roster table. This directly addresses the 'explore' goal for the report's densest data.
        3. Role Explorer: Converts the large, hard-to-read matrix from the report into an interactive tabbed/card interface. Users click a role (e.g., 'Admin II') to see *only* their tasks. This is a user-centric, task-oriented design.
        4. Training: Uses an accordion (collapsible list) to present training topics, keeping the UI clean and scannable.
        This structure was chosen over a linear 1:1 copy of the report because it breaks down complex data into manageable, interactive components, guiding the user from high-level strategy to specific operational details. -->
    <!-- Visualization & Content Choices: 
        1. Report Info: Strategic Priorities (Sec IV) & Monitoring (Sec V). Goal: Inform. Viz: Styled HTML/Tailwind lists. Interaction: None. Justification: Provides upfront strategic context. Library: HTML/Tailwind.
        2. Report Info: Team Rosters (Sec I). Goal: Organize (by Team). Viz: Dynamic HTML Table. Interaction: 'Seattle'/'SKC' filter buttons. JS updates table innerHTML. Justification: Filter makes the detailed schedule data explorable. Library: Vanilla JS, HTML/Tailwind. (Chart removed as requested)
        3. Report Info: Functional Breakdown (Sec II). Goal: Organize, Inform. Viz: HTML/Tailwind tabs/cards and a dynamic content area. Interaction: Click on a Role Tab. JS event listener finds data for that role and populates the content area. Justification: De-clutters the report's massive matrix into a clean, "click-to-discover" UI. Library: Vanilla JS, HTML/Tailwind.
        4. Report Info: Training (Sec III). Goal: Organize. Viz: HTML/Tailwind accordion list. Interaction: Click on skill header. JS toggles 'hidden' class on the detail panel. Justification: Standard, clean UI for list/detail data. Library: Vanilla JS, HTML/Tailwind. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .nav-link {
            transition: color 0.2s, border-bottom-color 0.2s;
        }
        .nav-link:hover, .nav-link.active {
            color: #0d9488; 
            border-bottom-color: #0d9488;
        }
        .team-btn {
            transition: background-color 0.2s, color 0.2s;
        }
        .team-btn.active {
            background-color: #0d9488;
            color: #ffffff;
        }
        .team-btn:not(.active) {
            background-color: #f1f5f9;
            color: #334155;
        }
        .role-tab {
            transition: background-color 0.2s, color 0.2s, border-color 0.2s;
        }
        .role-tab.active {
            background-color: #f0fdfa;
            color: #0d9488;
            border-color: #0d9488;
        }
        .role-tab:not(.active) {
            background-color: #ffffff;
            color: #475569;
            border-color: #e2e8f0;
        }
        .accordion-header span {
            transition: transform 0.3s ease;
        }
        .accordion-header.open span {
            transform: rotate(45deg);
        }
        .sortable-header {
            cursor: pointer;
            transition: color 0.15s;
            position: relative;
        }
        .sortable-header:hover {
            color: #0d9488;
        }
        .sort-icon {
            margin-left: 0.5rem;
            opacity: 0.3;
            transition: opacity 0.15s;
        }
        .sortable-header:hover .sort-icon {
            opacity: 0.7;
        }
        .sortable-header.sorted .sort-icon {
            opacity: 1;
        }
        .filter-menu {
            position: absolute;
            top: 100%;
            right: 0;
            z-index: 10;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 0.375rem; /* rounded-md */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            padding: 0.5rem;
            min-width: 150px;
        }
        .filter-option {
            padding: 0.5rem 0.75rem;
            cursor: pointer;
            border-radius: 0.25rem;
        }
        .filter-option:hover {
            background-color: #f1f5f9;
        }
        .filter-option.active {
            background-color: #f0fdfa;
            color: #0d9488;
            font-weight: 600;
        }
        /* Tooltip styles */
        .has-tooltip {
            position: relative;
        }
        .tooltip {
            position: absolute;
            z-index: 20;
            top: -10px;
            left: 50%;
            transform: translate(-50%, -100%);
            padding: 4px 8px;
            background-color: #334155; 
            color: white;
            border-radius: 4px;
            font-size: 0.75rem;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s;
        }
        .has-tooltip:hover .tooltip {
            opacity: 1;
        }
    </style>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'brand-light': '#fefce8',
                        'brand-base': '#fde047',
                        'brand-dark': '#eab308',
                        'accent-light': '#f0fdfa',
                        'accent-base': '#14b8a6',
                        'accent-dark': '#0d9488',
                        'neutral-base': '#fafaf9',
                        'neutral-text': '#334155',
                        'neutral-subtle': '#64748b',
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                },
            },
        }
    </script>
</head>
<body class="bg-neutral-base text-neutral-text font-sans antialiased">

    <header class="sticky top-0 z-50 w-full bg-white shadow-md">
        <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex-shrink-0 flex items-center">
                    <h1 class="text-xl font-bold text-accent-dark">Admin Operations Plan</h1>
                </div>
                <div class="hidden sm:block sm:ml-6">
                    <div class="flex space-x-4">
                        <a href="#overview" class="nav-link px-3 py-2 rounded-md text-sm font-medium text-neutral-subtle border-b-2 border-transparent" data-target="overview">Overview</a>
                        <a href="#goals" class="nav-link px-3 py-2 rounded-md text-sm font-medium text-neutral-subtle border-b-2 border-transparent" data-target="goals">Strategic Goals</a>
                        <a href="#coverage" class="nav-link px-3 py-2 rounded-md text-sm font-medium text-neutral-subtle border-b-2 border-transparent" data-target="coverage">Team Coverage</a>
                        <a href="#roles" class="nav-link px-3 py-2 rounded-md text-sm font-medium text-neutral-subtle border-b-2 border-transparent" data-target="roles">Team Functions</a>
                        <a href="#training" class="nav-link px-3 py-2 rounded-md text-sm font-medium text-neutral-subtle border-b-2 border-transparent" data-target="training">Training</a>
                    </div>
                </div>
            </div>
        </nav>
    </header>

    <main class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        
        <section id="overview" class="mb-16 scroll-mt-20">
            <h2 class="text-3xl font-bold text-neutral-text mb-4">Overview</h2>
            <p class="text-lg text-neutral-subtle mb-8">
                The ADS administrative team provides comprehensive support to division leadership, Care Coordination Program, and cross-functional operations. The team ensures that day-to-day workflows, financial processing, and data integrity are maintained to support the delivery of essential services to over 15,000 clients and 300 staff members across ADS. This plan defines the administrative structure, primary responsibilities by classification, and ongoing operational objectives.
            </p>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <!-- REMOVED DIVISION SUPPORT GOALS CARD -->
            </div>
        </section>

        <section id="goals" class="mb-16 scroll-mt-20">
            <h2 class="text-3xl font-bold text-neutral-text mb-4">Strategic Goals</h2>
            <p class="text-lg text-neutral-subtle mb-8">
                These goals define the high-level objectives for the administrative team, focusing on process improvement, communication, and capacity building.
            </p>
            <div class="bg-white p-8 rounded-lg shadow-sm border border-gray-200">
                <ol class="space-y-6 list-none p-0">
                    <li class="flex items-start">
                        <span class="text-xl font-bold text-accent-dark mr-3 mt-1">1.</span>
                        <div>
                            <h4 class="font-semibold text-neutral-text">Build Staff Capacity:</h4>
                            <p class="text-neutral-subtle">Provide cross-training between Admin Spec I and Admin Spec II roles to ensure consistent coverage of all tasks and team functions.</p>
                        </div>
                    </li>
                    <li class="flex items-start">
                        <span class="text-xl font-bold text-accent-dark mr-3 mt-1">2.</span>
                        <div>
                            <h4 class="font-semibold text-neutral-text">Standardize Processes:</h4>
                            <p class="text-neutral-subtle">Develop and maintain SOPs and training documents for all team functions.</p>
                        </div>
                    </li>
                    <li class="flex items-start">
                        <span class="text-xl font-bold text-accent-dark mr-3 mt-1">3.</span>
                        <div>
                            <h4 class="font-semibold text-neutral-text">Expand Division-Wide Administrative Support:</h4>
                            <p class="text-neutral-subtle">Deliver comprehensive support to division leadership, contracts, and planning units by proactively aligning administrative resources, streamlining coordination with program managers, and enhancing service delivery across all core functions</p>
                        </div>
                    </li>
                    <li class="flex items-start">
                        <span class="text-xl font-bold text-accent-dark mr-3 mt-1">4.</span>
                        <div>
                            <h4 class="font-semibold text-neutral-text">Align Roles and Support Levels:</h4>
                            <p class="text-neutral-subtle">Collaborate with division leadership to assess, realign, and clarify administrative responsibilities, ensuring all staff work within the scope of their roles. Adjust support assignments as needed based on changing program and leadership priorities, so resources are matched to operational and strategic needs.</p>
                        </div>
                    </li>
                </ol>
            </div>
        </section>
        
        <section id="coverage" class="mb-16 scroll-mt-20">
            <h2 class="text-3xl font-bold text-neutral-text mb-4">Weekly Coverage Dashboard</h2>
            <p class="text-lg text-neutral-subtle mb-8">
                Explore the weekly staffing plan for each administrative team. Use the team buttons to view the roster and the position filter to narrow down results. Click on any column header (Staff, Position, Day) to sort the table, or use the **filter icon** on the day columns to filter by **In Office** or **Telework**.
            </p>
            <div class="mb-6 flex flex-col sm:flex-row justify-center sm:justify-between items-center space-y-4 sm:space-y-0 sm:space-x-4">
                <div class="flex space-x-2">
                    <button id="btn-seattle" class="team-btn font-semibold py-2 px-6 rounded-full text-sm active has-tooltip" data-team="seattle">
                        Seattle Team
                        <span class="tooltip">Show Seattle Roster</span>
                    </button>
                    <button id="btn-skc" class="team-btn font-semibold py-2 px-6 rounded-full text-sm has-tooltip" data-team="skc">
                        SKC Team
                        <span class="tooltip">Show SKC Roster</span>
                    </button>
                </div>
                <!-- REMOVED FILTER HERE -->
            </div>
            
            <div class="grid grid-cols-1 gap-8 items-start">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 w-full">
                    <div class="flex flex-col sm:flex-row justify-between items-center p-6 pb-4 border-b border-gray-100">
                        <h3 id="rosterTitle" class="text-xl font-semibold text-neutral-text mb-4 sm:mb-0">Seattle Admin Team Roster</h3>
                        <div class="flex space-x-3 w-full sm:w-auto">
                             <!-- REMOVED STAFF NAME FILTER -->
                             <select id="positionFilter" class="w-full sm:w-36 p-2 border border-gray-300 rounded-md text-sm text-neutral-text focus:ring-accent-dark focus:border-accent-dark">
                                <option value="All">Filter Position</option>
                                <!-- Positions populated by JS -->
                            </select>
                        </div>
                    </div>
                    <div class="overflow-x-auto max-h-[410px]">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50 sticky top-0">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider sortable-header staff-header has-tooltip" data-sort-key="staff" data-sort-dir="none">
                                        <div class="flex items-center justify-between">
                                            Staff
                                            <span class="tooltip">Click to Sort Staff</span>
                                            <span class="flex items-center space-x-1">
                                                <span class="sort-icon"></span>
                                                <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-column="staff">
                                                    &#9660; <!-- Unicode triangle for filter -->
                                                    <div class="filter-menu hidden" data-column-menu="staff">
                                                        <div class="filter-option" data-filter-value="All">Show All</div>
                                                        <!-- Staff options populated by JS -->
                                                    </div>
                                                </button>
                                            </span>
                                        </div>
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider position-header has-tooltip" data-sort-key="pos" data-sort-dir="none">
                                        <div class="flex items-center justify-between">
                                            Position
                                            <span class="tooltip">Click to Sort Position</span>
                                            <span class="flex items-center space-x-1">
                                                <span class="sort-icon"></span>
                                                <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-column="pos">
                                                    &#9660;
                                                    <div class="filter-menu hidden" data-column-menu="pos">
                                                        <div class="filter-option" data-filter-value="All">Show All</div>
                                                        <!-- Position options populated by JS -->
                                                    </div>
                                                </button>
                                            </span>
                                        </div>
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider day-header has-tooltip" data-sort-key="Mon" data-sort-dir="none">
                                        <div class="flex items-center justify-between">
                                            Mon
                                            <span class="tooltip">Click to Filter Day Status</span>
                                            <span class="flex items-center space-x-1">
                                                <span class="sort-icon"></span>
                                                <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-day="Mon" data-column="Mon">
                                                    &#9660; <!-- Unicode triangle for filter -->
                                                    <div class="filter-menu hidden" data-column-menu="Mon">
                                                        <div class="filter-option" data-filter-value="All">Show All</div>
                                                        <div class="filter-option" data-filter-value="In Office">In Office</div>
                                                        <div class="filter-option" data-filter-value="Telework">Telework</div>
                                                    </div>
                                                </button>
                                            </span>
                                        </div>
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider day-header has-tooltip" data-sort-key="Tue" data-sort-dir="none">
                                        <div class="flex items-center justify-between">
                                            Tue
                                            <span class="tooltip">Click to Filter Day Status</span>
                                            <span class="flex items-center space-x-1">
                                                <span class="sort-icon"></span>
                                                <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-day="Tue" data-column="Tue">
                                                    &#9660;
                                                    <div class="filter-menu hidden" data-column-menu="Tue">
                                                        <div class="filter-option" data-filter-value="All">Show All</div>
                                                        <div class="filter-option" data-filter-value="In Office">In Office</div>
                                                        <div class="filter-option" data-filter-value="Telework">Telework</div>
                                                    </div>
                                                </button>
                                            </span>
                                        </div>
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider day-header has-tooltip" data-sort-key="Wed" data-sort-dir="none">
                                        <div class="flex items-center justify-between">
                                            Wed
                                            <span class="tooltip">Click to Filter Day Status</span>
                                            <span class="flex items-center space-x-1">
                                                <span class="sort-icon"></span>
                                                <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-day="Wed" data-column="Wed">
                                                    &#9660;
                                                    <div class="filter-menu hidden" data-column-menu="Wed">
                                                        <div class="filter-option" data-filter-value="All">Show All</div>
                                                        <div class="filter-option" data-filter-value="In Office">In Office</div>
                                                        <div class="filter-option" data-filter-value="Telework">Telework</div>
                                                    </div>
                                                </button>
                                            </span>
                                        </div>
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider day-header has-tooltip" data-sort-key="Thu" data-sort-dir="none">
                                        <div class="flex items-center justify-between">
                                            Thu
                                            <span class="tooltip">Click to Filter Day Status</span>
                                            <span class="flex items-center space-x-1">
                                                <span class="sort-icon"></span>
                                                <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-day="Thu" data-column="Thu">
                                                    &#9660;
                                                    <div class="filter-menu hidden" data-column-menu="Thu">
                                                        <div class="filter-option" data-filter-value="All">Show All</div>
                                                        <div class="filter-option" data-filter-value="In Office">In Office</div>
                                                        <div class="filter-option" data-filter-value="Telework">Telework</div>
                                                    </div>
                                                </button>
                                            </span>
                                        </div>
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider day-header has-tooltip" data-sort-key="Fri" data-sort-dir="none">
                                        <div class="flex items-center justify-between">
                                            Fri
                                            <span class="tooltip">Click to Filter Day Status</span>
                                            <span class="flex items-center space-x-1">
                                                <span class="sort-icon"></span>
                                                <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-day="Fri" data-column="Fri">
                                                    &#9660;
                                                    <div class="filter-menu hidden" data-column-menu="Fri">
                                                        <div class="filter-option" data-filter-value="All">Show All</div>
                                                        <div class="filter-option" data-filter-value="In Office">In Office</div>
                                                        <div class="filter-option" data-filter-value="Telework">Telework</div>
                                                    </div>
                                                </button>
                                            </span>
                                        </div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="rosterTableBody" class="bg-white divide-y divide-gray-200">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </section>

        <section id="roles" class="mb-16 scroll-mt-20">
            <h2 class="text-3xl font-bold text-neutral-text mb-4">Team Functions</h2>
            <p class="text-lg text-neutral-subtle mb-8">
                Discover the specific responsibilities for each administrative role. The original plan's matrix is broken down here for clarity. Click a role below to see a detailed list of their assigned functions and tasks.
            </p>
            <div class="flex flex-wrap gap-3 mb-6" id="roleTabs">
            </div>
            <div id="roleContent" class="bg-white p-6 rounded-lg shadow-sm border border-gray-200 min-h-[300px]">
            </div>
        </section>

        <section id="training" class="mb-16 scroll-mt-20">
            <h2 class="text-3xl font-bold text-neutral-text mb-4">Training & Development</h2>
            <p class="text-lg text-neutral-subtle mb-8">
                This section outlines the "Skill-Building Toolkit" designed to foster operational continuity and cross-training. The table below details all necessary training topics, their descriptions, assigned training contacts, and target completion dates.
            </p>
            <div class="flex justify-end space-x-3 mb-4">
                <button id="addTrainingBtn" class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-150 ease-in-out has-tooltip">
                    Add New Training Item
                    <span class="tooltip">Add a blank, editable row</span>
                </button>
                <button id="saveTrainingBtn" class="bg-accent-dark hover:bg-accent-base text-white font-semibold py-2 px-4 rounded-md shadow-md transition duration-150 ease-in-out has-tooltip">
                    Save Changes
                    <span class="tooltip">Save edits to browser storage</span>
                </button>
            </div>
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider w-1/5 training-sortable-header" data-sort-key="skill">
                                <div class="flex items-center justify-between">
                                    Function
                                    <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-column="skill">
                                        &#9660;
                                        <div class="filter-menu hidden" data-column-menu="skill">
                                            <div class="filter-option" data-filter-value="All">Show All</div>
                                            <!-- Skill options populated by JS -->
                                        </div>
                                    </button>
                                </div>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider w-2/5">Description / Topics</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider w-1/5 training-sortable-header" data-sort-key="contact">
                                <div class="flex items-center justify-between">
                                    Training Contact
                                    <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-column="contact">
                                        &#9660;
                                        <div class="filter-menu hidden" data-column-menu="contact">
                                            <div class="filter-option" data-filter-value="All">Show All</div>
                                            <!-- Contact options populated by JS -->
                                        </div>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider w-1/6 training-sortable-header" data-sort-key="date">
                                <div class="flex items-center justify-between">
                                    Objective Date
                                    <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-column="date">
                                        &#9660;
                                        <div class="filter-menu hidden" data-column-menu="date">
                                            <div class="filter-option" data-filter-value="All">Show All</div>
                                            <!-- Date options populated by JS -->
                                        </div>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-subtle uppercase tracking-wider w-1/6 training-sortable-header" data-sort-key="resources">
                                <div class="flex items-center justify-between">
                                    Resources
                                    <button class="filter-btn text-neutral-subtle hover:text-accent-dark relative" data-column="resources">
                                        &#9660;
                                        <div class="filter-menu hidden" data-column-menu="resources">
                                            <div class="filter-option" data-filter-value="All">Show All</div>
                                            <!-- Resources options populated by JS -->
                                        </div>
                                    </button>
                                </div>
                            </th>
                            <th scope="col" class="px-3 py-3 text-center text-xs font-medium text-neutral-subtle uppercase tracking-wider w-12">
                                Delete
                            </th>
                        </tr>
                    </thead>
                    <tbody id="trainingTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Content rendered by JS initTraining() -->
                    </tbody>
                </table>
            </div>
        </section>
    </main>

    <footer class="bg-white border-t border-gray-200 mt-16">
        <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 text-center text-neutral-subtle text-sm">
            Interactive Admin Operations Plan | Generated from Source Report
        </div>
    </footer>

    <script>
        // --- GLOBAL STATE & DATA DECLARATIONS ---
        const teamData = {
            seattle: [
                { staff: "Alek Puloka", pos: "Admin Support Supervisor", schedule: ["Telework", "In Office", "In Office", "Telework", "In Office"] },
                { staff: "Diva Springmeyer", pos: "Admin Specialist II", schedule: ["In Office", "Telework", "In Office", "Telework", "In Office"] },
                { staff: "Sherri Pena", pos: "Admin Specialist I", schedule: ["Telework", "In Office", "In Office", "Telework", "In Office"] },
                { staff: "Feliz Sanchez", pos: "Accounting Tech II", schedule: ["In Office", "Telework", "In Office", "In Office", "Telework"] },
                { staff: "Josh Estacio", pos: "Admin Specialist II", schedule: ["In Office", "Telework", "In Office", "In Office", "Telework"] },
                { staff: "Jenney Therrien", pos: "Office Aid", schedule: ["In Office", "In Office", "In Office", "In Office", "In Office"] }
            ],
            skc: [
                { staff: "Alek Puloka", pos: "Admin Support Supervisor", schedule: ["Telework", "In Office", "In Office", "Telework", "In Office"] },
                { staff: "Mendel Saturnino", pos: "Admin Specialist II", schedule: ["Telework", "In Office", "In Office", "Telework", "In Office"] },
                { staff: "Brieah Marino", pos: "Admin Specialist II", schedule: ["In Office", "Telework", "In Office", "In Office", "Telework"] },
                { staff: "Fredo Mauricio", pos: "Admin Specialist I", schedule: ["Telework", "In Office", "In Office", "Telework", "In Office"] },
                { staff: "Kellie Howell", pos: "Admin Specialist I", schedule: ["In Office", "Telework", "In Office", "In Office", "Telework"] },
                { staff: "Merle Ellison", pos: "Admin Specialist I", schedule: ["Telework", "Telework", "Telework", "Telework", "Telework"] },
                { staff: "Stephanie Day", pos: "Office Aid", schedule: ["In Office", "Telework", "In Office", "In Office", "Telework"] }
            ]
        };

        const functionalData = {
            admin1: {
                name: "Admin Specialist I",
                tasks: [
                    { area: "Frontline and Customer Support", task: "Staff main phone lines; process mail; route faxes; receive, route, and respond to inquiries from internal and external stakeholders." },
                    { area: "Records and Data Management", task: "File, scan, archive, and distribute records following City retention policies." },
                    { area: "Scheduling and Coordination", task: "Track team calendar coverage; set up room reservations and meeting logistics." },
                    { area: "Financial Processing and Procurement", task: "Collect receipts and documentation; deliver coding support for invoices." },
                    { area: "Reporting and Tracking", task: "Enter and update tracking logs (mail, deliveries, timesheet submissions)." },
                    { area: "Fleet and Facilities", task: "Assist with vehicle reservations and key coordination." },
                    { area: "Technology and SharePoint", task: "Maintain document library order and accessibility." },
                    { area: "Special Projects and Strategic Initiatives", task: "Support event coordination and divisional recognition activities." }
                ]
            },
            admin2: {
                name: "Admin Specialist II",
                tasks: [
                    { area: "Onboarding and Offboarding Support", task: "Coordinate onboarding and offboarding processes for new and exiting staff: submit IT and facilities tickets, assist with seat assignments and workspace setup, ensure equipment distribution and collection, and provide orientation support as needed." },
                    { area: "Records and Data Management", task: "Maintain and verify case management data in systems (CMC, Barcode, CARE, GetCare). Prepare data reports for leadership decision-making." },
                    { area: "Scheduling and Coordination", task: "Coordinate meetings for management teams and ensure agenda, presentation, and materials preparation." },
                    { area: "Financial Processing and Procurement", task: "Process accounts payable, monitor credit card use, verify invoice coding, and track budget expenditures." },
                    { area: "Reporting and Tracking", task: "Create and maintain detailed tracking systems for program metrics, caseload reporting, and administrative processes." },
                    { area: "Fleet and Facilities", task: "Handle divisional property and space coordination, work orders, and vendor requests." },
                    { area: "Technology", task: "Support staff with computer and laptop setup, troubleshooting, and equipment check-out; collaborate with IT for system issue escalation." },
                    { area: "Special Projects and Strategic Initiatives", task: "Lead documentation and progress reporting for special administrative initiatives and citywide process improvements." }
                ]
            },
            supervisor: {
                name: "Admin Support Supervisor",
                tasks: [
                    { area: "Team Leadership & Guidance", task: "Supervise, coach, and support administrative staff, lead collaboration, communicate expectations, resolve escalations" },
                    { area: "Operations & Resource Management", task: "Oversee office equipment, supplies, fleet vehicles, ensure workspace setup, procurement, vendor coordination" },
                    { area: "Process Improvement & Reporting", task: "Develop and refine processes, ensure consistency, compile, review, and track metrics and compliance reports" },
                    { area: "Technology & Systems Oversight", task: "Serve as SharePoint/IT lead, approve access, coordinate onboarding/offboarding technology needs" },
                    { area: "Project & Initiative Leadership", task: "Lead special projects and divisional support initiatives, drive emergency preparedness, cross-training, and best practices" },
                    { area: "Financial/Procurement", task: "Purchase oversight" },
                ]
            },
            acctTech: {
                name: "Accounting Tech II",
                tasks: [
                    { area: "Accounts Payable Processing", task: "Accurately review, code, and process all divisional invoices, manage accounts payable emails and attachments, resolve discrepancies." },
                    { area: "Financial Documentation & Compliance", task: "Prepare and authorize expenditure documentation, audit, file, and reconcile records in compliance with city policies." },
                    { area: "Invoice & Records Management", task: "Track invoices, client orders, and payments in Excel, SharePoint." },
                    { area: "Reporting & Tracking", task: "Monthly/quarterly reports" },
                    { area: "Teamwork & Collaboration", task: "Serve as backup for other admin support staff" }
                ]
            },
            officeAid: {
                name: "Office Aid",
                tasks: [
                    { area: "Frontline & Customer Support", task: "Support with incoming and outbound mail." },
                    { area: "Supplies", task: "Organize and restock office and supply closets daily." },
                    { area: "Scheduling & Coordination", task: "Prep conference rooms each morning; Manage and update conference room calendars to reflect current bookings." },
                    { area: "Financial/Procurement", task: "Load and refill printer/copier paper and supplies daily to ensure readiness." },
                    { area: "Reporting & Tracking", task: "Update in-office signage, such as directional or event notices, as needed." },
                    { area: "Special Projects/Initiatives", task: "Event admin duties" }
                ]
            }
        };

        let trainingData = [
            { skill: "Meeting Notes", topics: "Best practices, live documentation, follow-up summaries", contact: "Alek Puloka", date: "Q4 2025", resources: "SharePoint Docs" },
            { skill: "Finance", topics: "Purchasing, invoice coding, travel, meals, refreshments", contact: "Feliz Sanchez", date: "Q4 2025", resources: "Finance SOP" },
            { skill: "Managing Office Supplies", topics: "Ordering, inventory, distribution", contact: "Jenney Therrien", date: "Q4 2025", resources: "Inventory Log" },
            { skill: "Computers", topics: "IT tickets, troubleshooting, user setup", contact: "Josh Estacio", date: "Q1 2026", resources: "IT Ticket System" },
            { skill: "Cellphones", topics: "Assignment, setup, troubleshooting", contact: "Diva Springmeyer", date: "Q1 2026", resources: "Asset Tracker" },
            { skill: "Cars", topics: "Reservation, usage logs, maintenance tracking", contact: "Sherri Pena", date: "Q1 2026", resources: "Fleet Manual" },
            { skill: "Booking Conference Rooms", topics: "Calendar systems, space coordination", contact: "Mendel Saturnino", date: "Q4 2025", resources: "Outlook/Teams" },
            { skill: "Scheduling Meetings", topics: "Outlook, Teams, Zoom logistics", contact: "Brieah Marino", date: "Q4 2025", resources: "Outlook/Teams" },
            { skill: "Business Cards", topics: "Ordering, proofing, distribution", contact: "Fredo Mauricio", date: "Q1 2026", resources: "Vendor Portal" },
            { skill: "Managing Websites", topics: "SharePoint, content posting, permissions", contact: "Kellie Howell", date: "Q2 2026", resources: "SharePoint Guide" },
            { skill: "Distribution Lists", topics: "Create/manage lists, permissions, city protocols", contact: "Merle Ellison", date: "Q2 2026", resources: "City IT Policy" },
            { skill: "Archiving", topics: "City retention policies, scanning, digital archive steps", contact: "Stephanie Day", date: "Q2 2026", resources: "Retention Schedule" }
        ];

        let currentTeam = 'seattle';
        let currentPositionFilter = 'All'; 
        let currentStaffFilter = 'All'; 
        let currentSortKey = 'staff';
        let currentSortDir = 'asc';
        let currentDayFilters = { 'Mon': 'All', 'Tue': 'All', 'Wed': 'All', 'Thu': 'All', 'Fri': 'All' };
        // ADDED 'resources' to currentTrainingFilters
        let currentTrainingFilters = { 'skill': 'All', 'contact': 'All', 'date': 'All', 'resources': 'All' };
        
        const dayKeys = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'];
        
        // DOM Elements (Defined globally here, assigned inside DOMContentLoaded)
        let rosterTableBody, rosterTitle, btnSeattle, btnSkc, roleTabsContainer, roleContentContainer, saveTrainingBtn, addTrainingBtn;

        // --- LOCAL STORAGE FUNCTIONS ---
        function saveTrainingData() {
            if (typeof localStorage !== 'undefined') {
                try {
                    localStorage.setItem('trainingData', JSON.stringify(trainingData));
                    if (saveTrainingBtn) {
                        saveTrainingBtn.textContent = 'Saved!';
                        setTimeout(() => {
                            saveTrainingBtn.textContent = 'Save Changes';
                        }, 1500);
                    }
                } catch (e) {
                    console.error("Could not save training data to local storage", e);
                    if (saveTrainingBtn) {
                        saveTrainingBtn.textContent = 'Save Failed!';
                    }
                }
            }
        }

        function loadTrainingData() {
            if (typeof localStorage !== 'undefined') {
                try {
                    const storedData = localStorage.getItem('trainingData');
                    if (storedData) {
                        // Load stored data, but ensure new 'resources' field is initialized if missing
                        const loadedData = JSON.parse(storedData);
                        trainingData = loadedData.map(item => ({
                            ...item,
                            resources: item.resources || 'N/A' 
                        }));
                    }
                } catch (e) {
                    console.error("Could not load training data from local storage", e);
                }
            }
        }

        // --- COVERAGE TABLE FUNCTIONS ---

        function getUniqueValues(key, team) {
            const sourceData = teamData[team] || [...teamData.seattle, ...teamData.skc];
            const values = sourceData.map(p => p[key]);
            return [...new Set(values)].filter(val => val !== 'All').sort();
        }

        function populateRosterFilterMenus() {
            const staffValues = getUniqueValues('staff', currentTeam);
            const posValues = getUniqueValues('pos', 'all'); 
            
            const staffMenu = document.querySelector('[data-column-menu="staff"]');
            const posMenu = document.querySelector('[data-column-menu="pos"]');
            
            if (staffMenu) {
                 staffMenu.innerHTML = `
                    <div class="filter-option" data-filter-value="All">Show All</div>
                    ${staffValues.map(val => `<div class="filter-option" data-filter-value="${val}">${val}</div>`).join('')}
                `;
            }
           
            if (posMenu) {
                posMenu.innerHTML = `
                    <div class="filter-option" data-filter-value="All">Show All</div>
                    ${posValues.map(val => `<div class="filter-option" data-filter-value="${val}">${val}</div>`).join('')}
                `;
            }
        }
        
        function sortData(data, key, direction) {
            if (direction === 'none') return data.sort((a, b) => a.originalIndex - b.originalIndex);

            const dayIndex = dayKeys.indexOf(key);

            return data.sort((a, b) => {
                let valA, valB;

                if (key === 'staff' || key === 'pos') {
                    valA = a[key].toLowerCase();
                    valB = b[key].toLowerCase();
                } else if (dayIndex !== -1) {
                    valA = a.schedule[dayIndex] === 'In Office' ? 0 : 1;
                    valB = b.schedule[dayIndex] === 'In Office' ? 0 : 1;
                    if (valA === valB) {
                        return a.staff.toLowerCase().localeCompare(b.staff.toLowerCase());
                    }
                } else {
                    return 0;
                }

                if (direction === 'asc') {
                    return valA > valB ? 1 : (valA < valB ? -1 : 0);
                } else {
                    return valA < valB ? 1 : (valA > valB ? -1 : 0);
                }
            });
        }

        function updateSortIcons() {
            document.querySelectorAll('.sortable-header').forEach(header => {
                const key = header.dataset.sortKey;
                const icon = header.querySelector('.sort-icon');
                header.classList.remove('sorted');
                if (icon) icon.innerHTML = '';
                
                if (key === currentSortKey) {
                    header.classList.add('sorted');
                    if (icon) {
                        if (currentSortDir === 'asc') {
                            icon.innerHTML = '▲';
                        } else if (currentSortDir === 'desc') {
                            icon.innerHTML = '▼';
                        }
                    }
                }
            });
        }

        function renderRosterTable(data) {
            
            const filteredData = data.filter(person => {
                const matchesStaff = currentStaffFilter === 'All' || person.staff === currentStaffFilter;
                const matchesPosition = currentPositionFilter === 'All' || person.pos === currentPositionFilter;
                
                const matchesDays = dayKeys.every((day, index) => {
                    const requiredStatus = currentDayFilters[day];
                    return requiredStatus === 'All' || person.schedule[index] === requiredStatus;
                });

                return matchesStaff && matchesPosition && matchesDays;
            });
            
            const sortedData = sortData(filteredData, currentSortKey, currentSortDir);

            if (rosterTableBody) {
                if (sortedData.length === 0) {
                    rosterTableBody.innerHTML = `<tr><td colspan="7" class="px-6 py-4 text-center text-neutral-subtle">No staff found matching the current filters.</td></tr>`;
                    return;
                }

                rosterTableBody.innerHTML = sortedData.map(person => `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-neutral-text">${person.staff}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-neutral-subtle">${person.pos}</div>
                        </td>
                        ${person.schedule.map(status => `
                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${status === 'In Office' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}">
                                    ${status}
                                </span>
                            </td>
                        `).join('')}
                    </tr>
                `).join('');
            }
            
            updateSortIcons();
            updateAllHeaderFilterStatus();
        }

        function updateCoverageSection() {
            const data = teamData[currentTeam].map((item, index) => ({...item, originalIndex: index})); 
            renderRosterTable(data);
            
            if (rosterTitle) rosterTitle.textContent = `${currentTeam === 'seattle' ? 'Seattle' : 'SKC'} Admin Team Roster`;
            if (btnSeattle) btnSeattle.classList.toggle('active', currentTeam === 'seattle');
            if (btnSkc) btnSkc.classList.toggle('active', currentTeam === 'skc');
        }
        
        function handleSortClick(e) {
            const header = e.target.closest('.sortable-header');
            if (!header) return;

            const key = header.dataset.sortKey;
            let direction = header.dataset.sortDir;
            
            if (e.target.closest('.filter-btn')) {
                return; 
            }

            if (key !== currentSortKey) {
                currentSortKey = key;
                direction = 'asc';
            } else {
                if (direction === 'none') {
                    direction = 'asc';
                } else if (direction === 'asc') {
                    direction = 'desc';
                } else {
                    direction = 'none';
                }
            }

            currentSortDir = direction;
            header.dataset.sortDir = direction;
            
            document.querySelectorAll('.sortable-header').forEach(h => {
                if (h !== header) {
                    h.dataset.sortDir = 'none';
                }
            });

            updateCoverageSection();
        }
        
        function updateAllHeaderFilterStatus() {
            document.querySelectorAll('.sortable-header').forEach(header => {
                const column = header.dataset.sortKey;
                const filterBtn = header.querySelector('.filter-btn');
                if (!filterBtn) return;
                
                const menu = header.querySelector('.filter-menu');
                let currentValue = 'All';

                if (column === 'staff') {
                    currentValue = currentStaffFilter;
                } else if (column === 'pos') {
                    currentValue = currentPositionFilter;
                } else if (dayKeys.includes(column)) {
                    currentValue = currentDayFilters[column];
                }
                
                if (menu) {
                    menu.querySelectorAll('.filter-option').forEach(option => {
                        option.classList.remove('active');
                    });

                    const activeOption = menu.querySelector(`[data-filter-value="${currentValue}"]`);
                    if(activeOption) {
                        activeOption.classList.add('active');
                    }
                }

                if (currentValue !== 'All') {
                    filterBtn.classList.add('text-accent-dark');
                } else {
                    filterBtn.classList.remove('text-accent-dark');
                }
            });
        }
        
        function initCoverage() {
            rosterTableBody = document.getElementById('rosterTableBody');
            rosterTitle = document.getElementById('rosterTitle');
            btnSeattle = document.getElementById('btn-seattle');
            btnSkc = document.getElementById('btn-skc');
            
            Object.keys(teamData).forEach(team => {
                teamData[team] = teamData[team].map((item, index) => ({...item, originalIndex: index}));
            });

            if (btnSeattle) {
                btnSeattle.addEventListener('click', () => {
                    currentTeam = 'seattle';
                    currentPositionFilter = 'All';
                    currentStaffFilter = 'All';
                    currentSortKey = 'staff';
                    currentSortDir = 'asc';
                    currentDayFilters = { 'Mon': 'All', 'Tue': 'All', 'Wed': 'All', 'Thu': 'All', 'Fri': 'All' };
                    populateRosterFilterMenus(); 
                    updateCoverageSection();
                });
            }
            if (btnSkc) {
                btnSkc.addEventListener('click', () => {
                    currentTeam = 'skc';
                    currentPositionFilter = 'All';
                    currentStaffFilter = 'All';
                    currentSortKey = 'staff';
                    currentSortDir = 'asc';
                    currentDayFilters = { 'Mon': 'All', 'Tue': 'All', 'Wed': 'All', 'Thu': 'All', 'Fri': 'All' };
                    populateRosterFilterMenus(); 
                    updateCoverageSection();
                });
            }
            
            const tableHead = document.querySelector('#coverage table thead');
            if (tableHead) {
                tableHead.addEventListener('click', handleSortClick);
            }
            
            populateRosterFilterMenus(); 
            updateCoverageSection();
        }

        // --- END COVERAGE TABLE FUNCTIONS ---

        // --- ROLE FUNCTIONS ---

        function initRoles() {
            let currentRole = 'officeAid';
            
            roleTabsContainer = document.getElementById('roleTabs');
            roleContentContainer = document.getElementById('roleContent');

            const roleOrder = ['officeAid', 'admin1', 'admin2', 'acctTech', 'supervisor'];

            if (roleTabsContainer) {
                 roleTabsContainer.innerHTML = roleOrder.map(key => {
                    const role = functionalData[key];
                    return `
                        <button class="role-tab py-2 px-4 border rounded-md text-sm font-semibold ${key === currentRole ? 'active' : ''} has-tooltip" data-role="${key}">
                            ${role.name}
                            <span class="tooltip">View ${role.name} tasks</span>
                        </button>
                    `;
                }).join('');
                
                roleTabsContainer.addEventListener('click', (e) => {
                    const tab = e.target.closest('button');
                    if (tab) {
                        currentRole = tab.dataset.role;
                        updateRoleContent();
                    }
                });
            }
            
            updateRoleContent();

            function updateRoleContent() {
                const role = functionalData[currentRole];
                if (roleContentContainer) {
                     roleContentContainer.innerHTML = `
                        <h3 class="text-xl font-semibold text-accent-dark mb-6">${role.name} Responsibilities</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
                            ${role.tasks.map(item => `
                                <div class="border-l-4 border-accent-base pl-4 py-1">
                                    <h4 class="font-semibold text-neutral-text">${item.area}</h4>
                                    <p class="text-neutral-subtle">${item.task}</p>
                                </div>
                            `).join('')}
                        </div>
                    `;
                }
                
                document.querySelectorAll('#roleTabs button').forEach(tab => {
                    tab.classList.toggle('active', tab.dataset.role === currentRole);
                });
            }
        }

        // --- TRAINING TABLE FUNCTIONS ---
        
        function getUniqueTrainingValues(key) {
            const values = trainingData.map(p => p[key]);
            const filterKeys = ['skill', 'contact', 'date', 'resources'];
            
            if (filterKeys.includes(key)) {
                return [...new Set(values)].filter(val => val !== 'All' && val !== undefined).sort();
            }
            return [];
        }

        function populateTrainingFilterMenus() {
            ['skill', 'contact', 'date', 'resources'].forEach(key => {
                const menu = document.querySelector(`[data-column-menu="${key}"]`);
                const values = getUniqueTrainingValues(key);
                
                if (menu) {
                    menu.innerHTML = `
                        <div class="filter-option" data-filter-key="${key}" data-filter-value="All">Show All</div>
                        ${values.map(val => `<div class="filter-option" data-filter-key="${key}" data-filter-value="${val}">${val}</div>`).join('')}
                    `;
                }
            });
        }
        
        function handleTrainingFilterSelection(e) {
            const option = e.target.closest('.filter-option');
            if (!option) return;

            const menu = option.closest('.filter-menu');
            const columnKey = option.dataset.filterKey;
            const value = option.dataset.filterValue;

            if (columnKey) {
                currentTrainingFilters[columnKey] = value;
            }
            
            menu.classList.add('hidden');
            renderTrainingTable();
        }

        function updateTrainingHeaderFilterStatus() {
             document.querySelectorAll('.training-sortable-header').forEach(header => {
                const column = header.dataset.sortKey;
                const filterBtn = header.querySelector('.filter-btn');
                if (!filterBtn) return;
                
                const menu = header.querySelector('.filter-menu');
                let currentValue = currentTrainingFilters[column] || 'All';
                
                if (filterBtn) {
                    if (currentValue !== 'All') {
                        filterBtn.classList.add('text-accent-dark');
                    } else {
                        filterBtn.classList.remove('text-accent-dark');
                    }
                }
                
                if (menu) {
                    menu.querySelectorAll('.filter-option').forEach(option => {
                        option.classList.remove('active');
                    });

                    const activeOption = menu.querySelector(`[data-filter-value="${currentValue}"]`);
                    if(activeOption) {
                        activeOption.classList.add('active');
                    }
                }
            });
        }
        
        function deleteTrainingItem(index) {
            // Remove item from trainingData array using the actual index
            trainingData.splice(index, 1);
            // Re-render the table
            renderTrainingTable();
            // Save changes to local storage
            saveTrainingData();
        }
        
        function handleTrainingEdit(e) {
            const target = e.target;
            const rowIndex = target.closest('tr').dataset.index;
            const columnKey = target.dataset.column;
            
            if (rowIndex !== undefined && columnKey) {
                const newValue = target.textContent.trim();
                const actualIndex = parseInt(rowIndex, 10); 

                if (trainingData[actualIndex]) {
                    trainingData[actualIndex][columnKey] = newValue;
                    renderTrainingTable();
                }
            }
        }

        function renderTrainingTable() {
            const tableBody = document.getElementById('trainingTableBody');
            
            const filteredData = trainingData.filter(item => {
                const matchesSkill = currentTrainingFilters.skill === 'All' || item.skill === currentTrainingFilters.skill;
                const matchesContact = currentTrainingFilters.contact === 'All' || item.contact === currentTrainingFilters.contact;
                const matchesDate = currentTrainingFilters.date === 'All' || item.date === currentTrainingFilters.date;
                const matchesResources = currentTrainingFilters.resources === 'All' || item.resources === currentTrainingFilters.resources;

                return matchesSkill && matchesContact && matchesDate && matchesResources;
            });
            
            if (tableBody) {
                if (filteredData.length === 0) {
                    tableBody.innerHTML = `<tr><td colspan="6" class="px-6 py-4 text-center text-neutral-subtle">No training items found matching the current filters.</td></tr>`;
                    return;
                }

                tableBody.innerHTML = filteredData.map(item => {
                    const originalIndex = trainingData.indexOf(item);
                    
                    return `
                        <tr data-index="${originalIndex}" class="hover:bg-gray-50 transition-colors">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-neutral-text">
                                <div contenteditable="true" data-column="skill" class="focus:ring-2 focus:ring-accent-dark focus:bg-accent-light rounded px-1 -mx-1">${item.skill}</div>
                            </td>
                            <td class="px-6 py-4 text-sm text-neutral-subtle">
                                <div contenteditable="true" data-column="topics" class="focus:ring-2 focus:ring-accent-dark focus:bg-accent-light rounded px-1 -mx-1">${item.topics}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-text">
                                <div contenteditable="true" data-column="contact" class="focus:ring-2 focus:ring-accent-dark focus:bg-accent-light rounded px-1 -mx-1">${item.contact}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-subtle">
                                <div contenteditable="true" data-column="date" class="focus:ring-2 focus:ring-accent-dark focus:bg-accent-light rounded px-1 -mx-1">${item.date}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-subtle">
                                <div contenteditable="true" data-column="resources" class="focus:ring-2 focus:ring-accent-dark focus:bg-accent-light rounded px-1 -mx-1">${item.resources}</div>
                            </td>
                            <td class="px-3 py-4 whitespace-nowrap text-center text-sm">
                                <button onclick="deleteTrainingItem(${originalIndex})" class="text-red-500 hover:text-red-700 p-1 rounded transition-colors has-tooltip">
                                    &#x1F5D1; <!-- Trash Can Icon -->
                                    <span class="tooltip">Delete Item</span>
                                </button>
                            </td>
                        </tr>
                    `;
                }).join('');
                
                tableBody.querySelectorAll('[contenteditable="true"]').forEach(cell => {
                    cell.addEventListener('blur', handleTrainingEdit);
                });
            }

            populateTrainingFilterMenus();
            updateTrainingHeaderFilterStatus();
        }

        function addNewTrainingItem() {
            const newItem = {
                skill: "New Training Topic",
                topics: "Describe goals and content here",
                contact: "Unassigned",
                date: "Q4 2026",
                resources: "Document link"
            };
            trainingData.push(newItem);
            renderTrainingTable(); 
            // Save the new blank entry immediately
            saveTrainingData();
        }

        function initTraining() {
            saveTrainingBtn = document.getElementById('saveTrainingBtn');
            addTrainingBtn = document.getElementById('addTrainingBtn');

            populateTrainingFilterMenus();
            
            const tableHead = document.querySelector('#training table thead');
            if (tableHead) {
                 tableHead.addEventListener('click', toggleFilterMenu);
            }
            document.querySelectorAll('#training .filter-menu').forEach(menu => {
                menu.addEventListener('click', handleTrainingFilterSelection);
            });
            
            if (saveTrainingBtn) {
                saveTrainingBtn.addEventListener('click', saveTrainingData);
            }
            if (addTrainingBtn) {
                addTrainingBtn.addEventListener('click', addNewTrainingItem);
            }
            
            renderTrainingTable();
        }
        
        // --- COMMON FILTER LOGIC ---

        function toggleFilterMenu(e) {
            const button = e.target.closest('.filter-btn');
            if (!button) return;

            const column = button.dataset.column;
            const menu = document.querySelector(`[data-column-menu="${column}"]`); 
            
            document.querySelectorAll('.filter-menu').forEach(m => {
                if (m !== menu) {
                    m.classList.add('hidden');
                }
            });

            if (menu) {
                menu.classList.toggle('hidden');
            }
            e.stopPropagation(); 
        }

        function handleFilterSelection(e) {
            const option = e.target.closest('.filter-option');
            if (!option) return;

            const menu = option.closest('.filter-menu');
            const column = menu.dataset.columnMenu;
            const value = option.dataset.filterValue;

            if (['staff', 'pos'].includes(column) || dayKeys.includes(column)) {
                if (column === 'staff') {
                    currentStaffFilter = value;
                } else if (column === 'pos') {
                    currentPositionFilter = value;
                } else if (dayKeys.includes(column)) {
                    currentDayFilters[column] = value;
                }
                updateCoverageSection();
            } else if (['skill', 'contact', 'date', 'resources'].includes(column)) {
                currentTrainingFilters[column] = value;
                renderTrainingTable();
            }
            
            menu.classList.add('hidden');
        }
        
        // --- NAVIGATION ---
        function initNav() {
            const navLinks = document.querySelectorAll('.nav-link');
            const sections = document.querySelectorAll('section[id]');
            
            navLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const targetId = link.getAttribute('href').substring(1);
                    const targetElement = document.getElementById(targetId);
                    if (targetElement) {
                        targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                });
            });
            
            const observerOptions = {
                root: null,
                rootMargin: '0px',
                threshold: 0.4
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const id = entry.target.id;
                        navLinks.forEach(link => {
                            link.classList.toggle('active', link.getAttribute('href') === `#${id}`);
                        });
                    }
                });
            }, observerOptions);

            sections.forEach(section => {
                observer.observe(section);
            });
        }
        
        // --- MAIN INIT ---
        document.addEventListener('DOMContentLoaded', () => {
            // Roster filter listeners must be attached early
            document.querySelectorAll('.filter-btn').forEach(button => {
                button.addEventListener('click', toggleFilterMenu);
            });
            document.querySelectorAll('.filter-menu').forEach(menu => {
                menu.addEventListener('click', handleFilterSelection);
            });

            if (typeof localStorage !== 'undefined') {
                loadTrainingData();
            }
            
            initNav();
            initCoverage();
            initRoles();
            initTraining();
            
            document.addEventListener('click', () => {
                document.querySelectorAll('.filter-menu').forEach(m => m.classList.add('hidden'));
            });
        });
    </script>
</body>
</html>
